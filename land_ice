#! /cluster/home/een023/.virtualenvs/p3/bin/python
"""Send in a path to a .nc file and the name of the file.

Then creates plots of the global land ice volume.

Usage:
    land_ice -i single_file.nc -p up/three/dirs -sp save_two_dirs_below_input -o output_name -plt simpel sphere anim
"""

import glob
import os
import sys
import datetime
import argparse
import xarray as xr
import numpy as np
import nc_time_axis
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import cartopy.crs as ccrs
import cartopy.feature as cfeat

parser = argparse.ArgumentParser(
    description='Create plots wrt. global land ice volume from a .nc file. \
        Plots that can be generated: \
        (1) simpel: Land ice volume vs time.')
parser.add_argument('-p', '--path', help='Relative path to .nc file. If not given, the current directory is used.')
parser.add_argument('-sp', '--savepath',
                    help='relative path to where the plot files are saved. If the savepath is -sp input, the same path is used here as is for the path parameter. If not given, the current directory is used.')
parser.add_argument('-i', '--input', type=str,
                    help='Input .nc file.')
parser.add_argument('-o', '--output', help='Name of the output files.')
parser.add_argument('-plt', '--plots', type=str, nargs='+',
                    help='List of the plots that should be generated.')

args = parser.parse_args()
# Correct the input argument
if args.input is None:
    raise ValueError('you must give the input files')
if args.plots is None:
    raise ValueError('you must specify what kind of plot you want (simple)')
if not set(args.plots).issubset(set(['simple'])):
    raise ValueError('you must choose between: simple')
# Correct the output argument
if args.output is None:
    output = datetime.date.today().strftime("%Y%m%d")
else:
    output = args.output
# Correct the path argument
if args.path is not None:
    path = args.path + '/' if args.path[-1] != '/' else args.path
else:
    path = ''
# Combine the path with all files
inputs = f'{path}{args.input}' if args.input.split(
    '.')[-1] == 'nc' else f'{path}{args.input}.nc'
if not glob.glob(inputs):
    print(f'I could not find {inputs}')
    print('Exiting...')
    sys.exit()
# Correct the savepath argument
savepath = args.savepath if args.savepath is not None else ''
savepath = path if savepath == 'input' else savepath
savepath = savepath + \
    '/' if savepath != '' and savepath[-1] != '/' else savepath
# Check if output file exist
def file_exist(end):
    if os.path.exists(savepath + output + end):
        ans = str(input(
            f'The file {output}{end} already exist in {savepath[:-1] if savepath != "" else "this directory"}. Do you want to overwrite this? (y/n)\t'))
        if ans != 'y':
            print('Exiting without making any plots...')
            sys.exit()
        else:
            print('Saving to', savepath + output + end)
    else:
        ans = str(input(f'Save to {savepath}{output}{end}? (y/n)\t'))
        if ans != 'y':
            print('Exiting without making any plots...')
            sys.exit()
        else:
            if savepath != '':
                os.makedirs(savepath, exist_ok=True)
            print('Saving to', savepath + output + end)


if 'simple' in args.plots:
    file_exist('_temp.png')
if 'sphere' in args.plots:
    file_exist('_sphere.png')
if 'anim' in args.plots:
    file_exist('.mp4')

# === <CODE> ===

def ice_volume(ice):
    # Scale to compensate for the grid.
    weights = np.cos(np.deg2rad(ice.lat))
    weights.name = 'weights'
    ice_weighted = ice.weighted(weights)
    volume = ice_weighted.sum(('lon', 'lat'))

# === </CODE> ===

multi_ice = xr.open_dataarray(inputs)
if 'simple' in args.plots:
    ice_volume(multi_ice)
