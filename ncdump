#! /home/een023/.virtualenvs/cesmtest/bin/python

"""Formatted output of a .nc file.

This script takes in as input with the `-i` `--input` flag a `.nc` file
and by default truncates the output if a lot of data exist,
so the most important information is presented.

The flag `-l` `--long` will override the truncation and print a long
output with all information contained in the .nc file.
"""

import textwrap
import pprint
import argparse
from netCDF4 import Dataset
from rich.console import Console
console=Console(force_terminal=True, color_system="truecolor", width=200)

parser = argparse.ArgumentParser(
        description='Print data from a .nc file')
parser.add_argument('-i', '--input', type=str, help='file name')
parser.add_argument('-l', '--long', action='store_true')

args = parser.parse_args()

def ncdump(nc_fid, verb=True):
    '''
    ncdump outputs dimensions, variables and their attribute information.
    The information is similar to that of NCAR's ncdump utility.
    ncdump requires a valid instance of Dataset.

    Parameters
    ----------
    nc_fid : netCDF4.Dataset
        A netCDF4 dateset object
    verb : Boolean
        whether or not nc_attrs, nc_dims, and nc_vars are printed

    Returns
    -------
    nc_attrs : list
        A Python list of the NetCDF file global attributes
    nc_dims : list
        A Python list of the NetCDF file dimensions
    nc_vars : list
        A Python list of the NetCDF file variables
    '''
    def print_ncattr(key):
        """
        Prints the NetCDF file attributes for a given key

        Parameters
        ----------
        key : unicode
            a valid netCDF4.Dataset.variables key
        """
        try:
            console.print("\t\t[italic white]type:[/italic white]", repr(nc_fid.variables[key].dtype))
            for ncattr in nc_fid.variables[key].ncattrs():
                console.print('\t\t[italic white]%s:[/italic white]' % ncattr, repr(
                    nc_fid.variables[key].getncattr(ncattr)))
        except KeyError:
            console.print("\t\t[italic white]WARNING: [/italic white][red]%s[/red] does not contain variable attributes" % key)

    # NetCDF global attributes
    nc_attrs = nc_fid.ncattrs()
    if verb:
        console.print("[bold white]NetCDF Global Attributes:[/bold white]")
        for nc_attr in nc_attrs:
            try:
                if repr(nc_fid.getncattr(nc_attr)[0]) != repr('\n'):
                    console.print('\t[italic white]%s:[/italic white]' % nc_attr, textwrap.fill(str(nc_fid.getncattr(nc_attr)), subsequent_indent='\t\t', break_long_words=False, break_on_hyphens=False))
                else:
                    console.print('\t[italic white]%s:[/italic white]' % nc_attr, textwrap.indent(str(nc_fid.getncattr(nc_attr)), '\t\t'))
            except:
                pass
    nc_dims = [dim for dim in nc_fid.dimensions]  # list of nc dimensions

    # Dimension shape information.
    if verb:
        console.print("[bold white]NetCDF dimension information:[/bold white]")
        for dim in nc_dims:
            console.print("\t[italic white]Name:[/italic white]", dim)
            console.print("\t\t[italic white]size:[/italic white]", len(nc_fid.dimensions[dim]))
            print_ncattr(dim)

    # Variable information.
    nc_vars = [var for var in nc_fid.variables]  # list of nc variables
    if verb:
        console.print("[bold white]NetCDF variable information:[/bold white]")
        if args.long:
            for var in nc_vars:
                if var not in nc_dims:
                    console.print('\t[italic white]Name:[/italic white]', var)
                    console.print("\t\t[italic white]dimensions:[/italic white]", repr(nc_fid.variables[var].dimensions))
                    console.print("\t\t[italic white]size:[/italic white]", nc_fid.variables[var].size)
                    print_ncattr(var)
        else: 
            if len(nc_vars) > 20:
                console.print("\t[italic white]Number of variables: [/italic white]", len(nc_vars))
                console.print("\t[italic white]Variables list: [/italic white]")  # , '\n', nc_vars)
                pp = pprint.PrettyPrinter(width=80, compact=True)
                console.print(textwrap.indent(pp.pformat(nc_vars), '\t\t'))
                # pprint.pprint(nc_vars)
            else:
                for var in nc_vars:
                    if var not in nc_dims:
                        console.print('\t[italic white]Name:[/italic white]', var)
                        console.print("\t\t[italic white]dimensions:[/italic white]", repr(nc_fid.variables[var].dimensions))
                        console.print("\t\t[italic white]size:[/italic white]", nc_fid.variables[var].size)
                        print_ncattr(var)
    return nc_attrs, nc_dims, nc_vars

ds = Dataset(args.input, 'r')
ncdump(ds, verb=True)
